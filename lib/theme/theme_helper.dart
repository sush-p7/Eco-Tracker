import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onSecondaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.black900,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.black900,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 2,
        space: 2,
        color: appTheme.black900,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 17.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray20002,
          fontSize: 11.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 65.fSize,
          fontFamily: 'SF Pro Rounded',
          fontWeight: FontWeight.w800,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 34.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 30.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blueGray80002,
          fontSize: 27.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Playfair Display',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray60002,
          fontSize: 11.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 8.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray5001,
          fontSize: 16.fSize,
          fontFamily: 'Playfair Display',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF2E2E31),
    primaryContainer: Color(0XFFA1A8B9),
    secondaryContainer: Color(0XFF4D2161),

    // Error colors
    errorContainer: Color(0XFFEE2222),

    // On colors(text colors)
    onPrimary: Color(0XFFFBFDFF),
    onPrimaryContainer: Color(0X1C202020),
    onSecondaryContainer: Color(0XCCFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFDB5E);
  Color get amberA400 => Color(0XFFFFCD00);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue500 => Color(0XFF2E90EA);

  // BlueGray
  Color get blueGray100 => Color(0XFFD2D2D2);
  Color get blueGray200 => Color(0XFFB2B8C8);
  Color get blueGray20001 => Color(0XFFB3B9C9);
  Color get blueGray20002 => Color(0XFFADADB6);
  Color get blueGray200A2 => Color(0XA2ABB6BB);
  Color get blueGray700 => Color(0XFF495566);
  Color get blueGray800 => Color(0XFF313955);
  Color get blueGray80001 => Color(0XFF363155);
  Color get blueGray80002 => Color(0XFF364459);
  Color get blueGray900 => Color(0XFF323432);
  Color get blueGray90001 => Color(0XFF2C2E3E);

  // Cyan
  Color get cyan900 => Color(0XFF006175);
  Color get cyan90001 => Color(0XFF0F4C72);

  // DeepOrange
  Color get deepOrangeA700 => Color(0XFFE41616);

  // Gray
  Color get gray100 => Color(0XFFF6F6F9);
  Color get gray10001 => Color(0XFFF3F5F8);
  Color get gray10002 => Color(0XFFF5F5F5);
  Color get gray10003 => Color(0XFFF2F2F2);
  Color get gray300 => Color(0XFFDFDFDF);
  Color get gray30001 => Color(0XFFE2E0E1);
  Color get gray30002 => Color(0XFFE0E0E0);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFBDBDBD);
  Color get gray40002 => Color(0XFFC2C2C2);
  Color get gray40003 => Color(0XFFB9B9B9);
  Color get gray40026 => Color(0X26B5B5B5);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFF9F9F9F);
  Color get gray5001 => Color(0XFFFAFAFA);
  Color get gray600 => Color(0XFF828282);
  Color get gray60001 => Color(0XFF696E7C);
  Color get gray60002 => Color(0XFF818181);
  Color get gray60003 => Color(0XFF6A6F7D);
  Color get gray60004 => Color(0XFF838383);
  Color get gray60026 => Color(0X267A7F86);
  Color get gray700 => Color(0XFF606161);
  Color get gray70001 => Color(0XFF5F5F5F);
  Color get gray70002 => Color(0XFF5B5B5B);
  Color get gray800 => Color(0XFF4F4F4F);
  Color get gray80001 => Color(0XFF3D3D3D);
  Color get gray80002 => Color(0XFF505050);

  // Green
  Color get green700 => Color(0XFF21B013);
  Color get green900 => Color(0XFF137A08);
  Color get green90001 => Color(0XFF128807);

  // Indigo
  Color get indigo30026 => Color(0X267176E3);

  // LightBlue
  Color get lightBlue900 => Color(0XFF176496);

  // Lime
  Color get lime600 => Color(0XFFA4E72A);
  Color get lime70033 => Color(0X3391CF20);

  // Red
  Color get red400 => Color(0XFFEB5757);
  Color get red700 => Color(0XFFEC1C24);
  Color get redA200 => Color(0XFFFF6161);

  // Teal
  Color get teal800 => Color(0XFF1C6758);
  Color get tealA400 => Color(0XFF2CD992);

  // TealAc
  Color get tealA4000c => Color(0X0C2BD98F);

  // Yellow
  Color get yellow600 => Color(0XFFF9CB38);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
